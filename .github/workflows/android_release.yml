name: Android CI

on:
  push:
    branches: [ "main", "develop" ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  packages: write
  actions: read
  security-events: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build Debug and Release APK
      run: ./gradlew assembleDebug assembleRelease
      
    - name: List build outputs
      run: |
        echo "=== Debug APK ==="
        ls -la app/build/outputs/apk/debug/ || echo "Debug directory not found"
        echo "=== Release APK ==="
        ls -la app/build/outputs/apk/release/ || echo "Release directory not found"
        
    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: app-debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk
        if-no-files-found: error
        
    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: app-release-apk
        path: app/build/outputs/apk/release/app-release-unsigned.apk
        if-no-files-found: error
        
    - name: Prepare release files
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
      run: |
        mkdir -p release_files
        
        # 复制 Debug APK
        if [ -f app/build/outputs/apk/debug/app-debug.apk ]; then
          cp app/build/outputs/apk/debug/app-debug.apk release_files/
          echo "✅ Debug APK 已复制"
        else
          echo "❌ Debug APK 未找到"
        fi
        
        # 复制 Release APK
        if [ -f app/build/outputs/apk/release/app-release-unsigned.apk ]; then
          cp app/build/outputs/apk/release/app-release-unsigned.apk release_files/app-release.apk
          echo "✅ Release APK 已复制"
        else
          echo "❌ Release APK 未找到"
          exit 1
        fi
        
        echo "=== Release 文件列表 ==="
        ls -la release_files/
        
        # 计算文件大小
        echo "=== APK 文件大小 ==="
        du -h release_files/*.apk
        
    - name: Create Release for Tags
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: release_files/*
        generate_release_notes: true
        draft: false
        prerelease: false
        body: |
          ## 📱 Android AirPlay Server
          
          ### 下载说明
          - **app-debug.apk**: 调试版本，包含调试信息
          - **app-release.apk**: 发布版本，推荐使用
          
          ### 安装要求
          - Android 7.0 (API 24) 或更高版本
          - ARM64 或 ARMv7 架构
          
          ### 使用方法
          1. 下载对应的 APK 文件
          2. 在 Android 设备上启用"未知来源"安装
          3. 安装 APK 文件
          4. 启动应用并按照界面提示操作
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create Development Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: dev-v${{ github.run_number }}
        name: Development Build v${{ github.run_number }}
        files: release_files/*
        draft: false
        prerelease: true
        body: |
          ## 🚧 开发版本构建
          
          这是一个自动生成的开发版本，基于最新的 main 分支代码。
          
          **构建信息:**
          - 构建号: ${{ github.run_number }}
          - 提交: ${{ github.sha }}
          - 分支: ${{ github.ref_name }}
          
          ### 文件说明
          - **app-debug.apk**: 调试版本
          - **app-release.apk**: 发布版本
          
          ⚠️ **注意**: 这是预发布版本，可能包含未完全测试的功能。
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run unit tests
      run: ./gradlew testDebugUnitTest
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: app/build/reports/tests/
        if-no-files-found: warn
